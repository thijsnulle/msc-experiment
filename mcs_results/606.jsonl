{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.001986980438232422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01450204849243164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0026390552520751953, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014109611511230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.0028700828552246094, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01450204849243164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.002357006072998047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0012400150299072266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013282299041748047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0012400150299072266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0014681816101074219, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014584064483642578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013282299041748047, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.002413034439086914, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0012400150299072266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0026140213012695312, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013179779052734375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014469623565673828, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0025789737701416016, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0024771690368652344, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024280548095703125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0025789737701416016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014050006866455078, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0014221668243408203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01450204849243164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0014431476593017578, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014410018920898438, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0008580684661865234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0024771690368652344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0027246475219726562, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014119148254394531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.001394033432006836, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014050006866455078, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.0025637149810791016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024280548095703125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0012400150299072266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0014681816101074219, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.002377033233642578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014460325241088867, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.0023818016052246094, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|># Copyright 2021, The TensorFlow Federated Authors.", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024280548095703125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007185220718383789, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1).reshape(-1, 1)) / df.std(axis=1).reshape(-1, 1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009498834609985352, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0.0})\n    return normalized_df", "compilation_passed": true, "time": 0.001394033432006836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014275074005126953, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008744001388549805, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01471400260925293, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(lambda col: col - df.min(axis=0)[col.name], axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace({np.nan: 0})\n    return normalized_df", "compilation_passed": true, "time": 0.008764982223510742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import random", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014641046524047852, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda col: (col - col.mean()) / col.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0057888031005859375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.014713048934936523, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.002413034439086914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|># coding=utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: x - x.mean() / x.std(ddof=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01450204849243164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013659000396728516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.01670098304748535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, dtype=float)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(axis=0, skipna=True), axis=1).div(df.std(axis=0, skipna=True), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008816242218017578, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=1, keepdims=True)) / df.std(axis=1, keepdims=True)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017024993896484375, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = stats.zscore(df, axis=0, ddof=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.017204999923706055, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.copy()\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, index=matrix.index, columns=matrix.columns)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix, columns=matrix.columns, index=matrix.index)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.010699033737182617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.replace(np.nan, 0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.006082057952880859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean(axis=0)) / df.std(axis=0, ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore, axis=1)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.008392810821533203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.sub(df.mean(), axis=0).sub(df.std(ddof=0, axis=0))\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.016028881072998047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df<|endoftext|>import re", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std())\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.015052080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(lambda x: (x - x.mean()) / x.std(ddof=0), axis=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0058557987213134766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = (df - df.mean()) / df.std(ddof=0)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0.0)\n    return normalized_df", "compilation_passed": true, "time": 0.0063860416412353516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\n\n\ndef task_func(matrix):\n    \"\"\"\n    Normalizes a 2D numeric array (matrix) using the Z score.\n    \n    Parameters:\n    matrix (array): The 2D numpy array.\n    \n    Returns:\n    DataFrame: The normalized DataFrame.\n\n    Requirements:\n    - pandas\n    - numpy\n    - scipy\n\n    Example:\n    >>> import numpy as np\n    >>> matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> normalized_df = task_func(matrix)\n    >>> isinstance(normalized_df, pd.DataFrame)\n    True\n    >>> np.allclose(normalized_df.mean(), 0)\n    True\n    >>> np.allclose(normalized_df.std(ddof=0), 1)\n    True\n    \"\"\"\n    df = pd.DataFrame(matrix)\n    normalized_df = df.apply(stats.zscore)\n    # Handle NaN values by replacing them with 0.0\n    normalized_df = normalized_df.fillna(0)\n    return normalized_df", "compilation_passed": true, "time": 0.012188911437988281, "tests_passed": true, "error": null}}
