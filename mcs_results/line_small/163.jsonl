{"selected_lines": [31, 32, 30, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0630960464477539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.045771121978759766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 30, 35, 34, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 30, 37, 31, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 38, 36, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04518008232116699, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.1228182315826416, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 36, 30, 32, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 35, 31, 38, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12161111831665039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 35, 38, 30, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0450439453125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04471087455749512, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 30, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044584035873413086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 30, 33, 36, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044213056564331055, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 38, 36, 32, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xticks([])\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044931888580322266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04599404335021973, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 36, 35, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.grid(axis='y', which='both')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.045259952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 37, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 37, 35, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04464411735534668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 30, 34, 35, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 37, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 37, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044605255126953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04361224174499512, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar')\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044382333755493164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04453587532043457, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 33, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.7625701427459717, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 38, 33, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04437422752380371, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.010670185089111328, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Random Values\")\n    ax.set_xticks([])\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 30, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32, 37, 34, 35, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 38, 31, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04443478584289551, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 35, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.05875992774963379, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044625043869018555, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 33, 35, 38, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04616808891296387, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 38, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 30, 37, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0441441535949707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 33, 31, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = {\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 35, 38, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 36, 35, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 37, 32, 31, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12782621383666992, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 31, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 36, 37, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 35, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 35, 36, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = {\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 38, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.04432320594787598, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 37, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05733919143676758, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.05038189888000488, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 31, 33, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > 5:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 30, 31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044426918029785156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 37, 31, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel(\"Amount\")\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 31, 34, 36, 33, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05737113952636719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.045050859451293945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.009165763854980469, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 31, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 34, 35, 33, 32, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set(\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 36, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = plt.figure().add_subplot(111)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 30, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 38, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 35, 38, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.022552013397216797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 32, 34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot.bar(stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 38, 32, 30, 36, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 31, 37, 30, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 34, 38, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.set_xlabel('Categories')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 38, 36, 30, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 36, 33, 32, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32, 34, 36, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 38, 31, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 35, 38, 32, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel(\"Amount\")\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 37, 32, 30, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 34, 30, 31, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_xticklabels(categories)\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 36, 31, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 38, 34, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 35, 31, 38, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 31, 34, 32, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 35, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044309139251708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 32, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04418778419494629, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043939828872680664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 34, 30, 35, 36, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 35, 36, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_xlabel('Categories')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.043467044830322266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04435992240905762, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38, 30, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = {\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 32, 35, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04418301582336426, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 33, 34, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if len(categories) <= cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04371285438537598, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0440521240234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 31, 30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 30, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 31, 32, 34, 33, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 37, 36, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_xticks(range(cols))\n    ax.set_xticks([])\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 31, 30, 34, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = plt.figure().add_subplot(111)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04385995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.04396319389343262, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 32, 31, 36, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 38, 32, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12110400199890137, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 37, 35, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 37, 30, 38, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 37, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.04985380172729492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 31, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.058995962142944336, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13816189765930176, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 30, 38, 34, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError('Columns exceeds number of available categories.')\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 32, 38, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 36, 35, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.legend(loc='upper left')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 33, 36, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 31, 37, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 36, 38, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if len(categories) < cols:\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 35, 34, 31, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 30, 38, 33, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Random Values\")\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 31, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 30, 36, 31, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 30, 35, 33, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 38, 34, 30, 35, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title('Task')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 37, 38, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) <= cols:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xticklabels(categories[:cols])\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04465198516845703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 34, 35, 33, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 30, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 32, 38, 35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04333019256591797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 35, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04376697540283203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 30, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = {\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 38, 32, 34, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 33, 34, 31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35, 37, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.grid(axis='y', which='both')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0442659854888916, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 33, 36, 35, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 31, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.043782949447631836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 30, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04355216026306152, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 31, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 33, 30, 36, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 37, 38, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04386591911315918, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12798309326171875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 31, 38, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12898612022399902, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 35, 33, 32, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.legend(columns=categories[:cols])\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 31, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.043905019760131836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 38, 36, 34, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 31, 35, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31, 33, 35, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar')\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 31, 33, 35, 38, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 37, 33, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set(\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 33, 30, 32, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if len(categories) > cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 38, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13169217109680176, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044278860092163086, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.043982744216918945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 31, 32, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.stack().plot.bar()\n    ax.set_xticklabels(categories)\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 30, 31, 37, 38, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set(\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 32, 30, 36, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34, 32, 35, 36, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.009915828704833984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 37, 32, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set(\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 35, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 36, 33, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 34, 38, 33, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 34, 31, 35, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = {\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 35, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044149160385131836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 32, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.057919979095458984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.04384493827819824, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12168407440185547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04402732849121094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 36, 31, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.legend(loc='upper left')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30, 36, 37, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = {\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 33, 31, 32, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 30, 33, 35, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = list(\"ABCDEF\")\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 30, 38, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 34, 31, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 34, 37, 35, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043219804763793945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04381227493286133, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 32, 37, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 36, 35, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Category')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04366111755371094, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 31, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 36, 38, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 31, 36, 32, 30, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 33, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.legend(loc='upper left')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 34, 31, 37, 36, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 32, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = {\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 30, 37, 33, 34, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04398298263549805, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 32, 33, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 30, 32, 36, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = plt.figure().add_subplot(111)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 32, 35, 37, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 32, 34, 37, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 31, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04424095153808594, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044116973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 36, 30, 34, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 34, 37, 33, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = {\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 30, 37, 31, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 32, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 35, 31, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044158220291137695, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36, 31, 30, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.1306309700012207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 30, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05815410614013672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot.bar(stacked=True)\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if len(categories) < cols:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 37, 38, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_xlabel('Category')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 34, 32, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 38, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044126033782958984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 31, 37, 30, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set(\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 32, 33, 31, 35, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 30, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.04377889633178711, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 30, 36, 37, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04346203804016113, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 37, 36, 34, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 30, 38, 35, 33, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_xlabel('Category')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 31, 30, 34, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04429483413696289, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04389810562133789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 32, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 33, 32, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 37, 38, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 30, 33, 38, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title('Task 4')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 36, 30, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 35, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 36, 38, 33, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 38, 33, 30, 37, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 38, 30, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.049436092376708984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 33, 36, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.legend(columns=categories[:cols])\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 31, 34, 32, 38, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_xticklabels(categories)\n    ax.set_title('Task')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 35, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.stack().plot.bar()\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05937600135803223, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 30, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12754106521606445, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 33, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04442286491394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 31, 30, 36, 32, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.045858144760131836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 37, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 38, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 37, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04349994659423828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04366111755371094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 32, 34, 38, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True)\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 35, 33, 37, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar')\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 38, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04363870620727539, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 33, 36, 35, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043569087982177734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 38, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 31, 36, 35, 37, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 38, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043704986572265625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 35, 31, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12161111831665039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 38, 32, 33, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(range(cols))\n    if len(categories) > cols:\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.043854713439941406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 38, 34, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.stack().plot.bar()\n    ax.set_xticklabels(categories)\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 34, 31, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 37, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 30, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 38, 30, 35, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 35, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04334902763366699, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 31, 33, 32, 36, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043966054916381836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043750762939453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 35, 37, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 36, 38, 32, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04385495185852051, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 31, 37, 33, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.00023603439331054688, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 35, 32, 36, 37, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04356503486633301, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04348492622375488, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 38, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 30, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 30, 35, 38, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 32, 35, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 34, 38, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0439300537109375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 34, 35, 32, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043538808822631836, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.047135353088378906, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 32, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 30, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 32, 35, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_xlabel('Categories')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 36, 35, 34, 38, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar')\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 38, 31, 35, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05662107467651367, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 32, 31, 38, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 33, 32, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 31, 38, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04348111152648926, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 38, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 30, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 34, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.043684959411621094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04304194450378418, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 36, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04456496238708496, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 38, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 37, 31, 36, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = \"ABCDE\"[:cols]\n    if cols >= len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044397830963134766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04397082328796387, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 36, 35, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04387307167053223, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 38, 37, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 35, 36, 32, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 37, 35, 31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = list(\"ABCDEF\")[:cols]\n    if len(categories) > cols:\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 31, 35, 33, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 30, 33, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.04381608963012695, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12161111831665039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.11969995498657227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04289698600769043, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04711604118347168, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 33, 34, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0568242073059082, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.045046091079711914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 38, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.045391082763671875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0499119758605957, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 32, 35, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel(\"Amount\")\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043627023696899414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04987287521362305, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04385685920715332, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 31, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.046874284744262695, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32, 38, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 35, 38, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 36, 31, 30, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = list(\"ABCDEF\")\n    if cols > 5:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13169217109680176, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 31, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0445561408996582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 31, 32, 37, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 30, 37, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 38, 36, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13969111442565918, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.044255971908569336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 30, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_xticks([])\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044103145599365234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 38, 36, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 32, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04404926300048828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 38, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 38, 34, 32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError(\"Too many columns.\")\n    data = {\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12161111831665039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.barh(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 36, 30, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) <= cols:\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True)\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.003747224807739258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 31, 35, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 36, 37, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 32, 35, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04412221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04487800598144531, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 32, 37, 34, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04531502723693848, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 31, 32, 36, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.grid(True)\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 30, 32, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 37, 33, 32, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33, 36, 30, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04407787322998047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 38, 33, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 35, 37, 34, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 30, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04387211799621582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 37, 32, 35, 31, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 30, 35, 37, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31, 38, 37, 35, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 36, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.045037269592285156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 36, 35, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043977975845336914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 37, 38, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 38, 37, 36, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04381895065307617, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 30, 37, 33, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.legend(loc='upper left')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 31, 30, 37, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar()\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04408097267150879, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 37, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 34, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 36, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel(\"Amount\")\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 31, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.06378388404846191, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.04417991638183594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 36, 37, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = {\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 36, 31, 37, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0455319881439209, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0436398983001709, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 33, 30, 31, 34, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.legend(loc='upper left')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.00021719932556152344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.1233360767364502, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05017900466918945, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 31, 36, 38, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32, 33, 31, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04431509971618652, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 32, 33, 31, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12629318237304688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 34, 36, 33, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 38, 34, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.bar(stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_xticks([])\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 35, 32, 31, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 35, 33, 34, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 38, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.bar()\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043576955795288086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 38, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 34, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0438687801361084, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37, 38, 36, 31, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 30, 35, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 30, 37, 35, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37, 30, 31, 34, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04420304298400879, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 31, 33, 32, 36, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 32, 36, 30, 31, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.legend(columns=categories[:cols])\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04530811309814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 34, 36, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 31, 30, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 30, 32, 38, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04393315315246582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 38, 35, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 36, 34, 38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 38, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38, 32, 36, 30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04418611526489258, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04404592514038086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 35, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 35, 37, 34, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 37, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) <= cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = {\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 36, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 37, 32, 38, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 38, 34, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = {\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 36, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.bar()\n    ax.set_xticklabels(categories)\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 32, 34, 33, 38, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12767529487609863, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 32, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04417896270751953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043734073638916016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 38, 37, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(axis='y', which='both')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 37, 30, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04453396797180176, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 31, 35, 37, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.1233360767364502, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 33, 34, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 35, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 31, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13051104545593262, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 32, 31, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 37, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.04605388641357422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot.bar()\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0443120002746582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31, 37, 30, 36, 38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 33, 36, 34, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.05016183853149414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04426693916320801, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 35, 30, 31, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044619083404541016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 38, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 32, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04506707191467285, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 35, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = {\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 37, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.044213056564331055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 38, 36, 35, 33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05996966361999512, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04407191276550293, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04952597618103027, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 38, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 30, 34, 35, 37, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set(\n    ax.set_title('Task')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 34, 37, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar')\n    ax.legend(loc='upper left')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 31, 36, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.049768924713134766, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13124990463256836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 38, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 34, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 35, 34, 37, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = {\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33, 32, 30, 35, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 32, 31, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 32, 30, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 31, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 37, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36, 34, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30, 31, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04414701461791992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 35, 30, 37, 36, 33, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04379892349243164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 37, 31, 30, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 32, 38, 34, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 38, 31, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 31, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04535031318664551, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 38, 35, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04385495185852051, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04412221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 31, 34, 32, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 38, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0439150333404541, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 36, 33, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot.bar()\n    ax.set_xticks(range(cols))\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.04449033737182617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 35, 33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 32, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38, 35, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xticks([])\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 31, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = np.random.rand(rows, cols)\n    ax = data.stack().plot.bar()\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13123011589050293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04435992240905762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0580289363861084, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 33, 36, 37, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 34, 35, 32, 31, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 38, 31, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 38, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0436708927154541, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 36, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.grid(axis='y', alpha=0.5)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 36, 37, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 38, 33, 37, 36, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.045851707458496094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 38, 33, 35, 37, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13123011589050293, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.00462794303894043, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04465198516845703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.04410409927368164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.03993105888366699, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 36, 34, 33, 35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.15542817115783691, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 38, 32, 34, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 38, 33, 37, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 36, 37, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(axis='y', which='both')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 32, 33, 35, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.12234377861022949, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 30, 35, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.04398298263549805, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12161111831665039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 31, 30, 32, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.05747413635253906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 34, 33, 30, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04401898384094238, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) <= cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04471993446350098, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 35, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 32, 31, 36, 34, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 34, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 35, 34, 37, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.legend(columns=categories[:cols])\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 37, 35, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories).T\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(\"Too many columns.\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043344974517822266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04417681694030762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 35, 33, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols >= len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 35, 36, 34, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30, 34, 35, 32, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 33, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 38, 34, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 38, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 34, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.0002620220184326172, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.grid(axis='y')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax", "compilation_passed": true, "time": 0.0457611083984375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 33, 38, 31, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 38, 32, 33, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 38, 36, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) > cols:\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 33, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 34, 31, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) <= cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.rand(rows, cols)\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 34, 31, 36, 35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = np.random.rand(rows, cols)\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 31, 33, 37, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04244184494018555, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04365110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 31, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 33, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05048799514770508, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 36, 34, 33, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"Too many columns.\")\n    data = {\n    ax = data.stack().plot.bar()\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 36, 32, 37, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Too many categories\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 36, 38, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.045987844467163086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 30, 38, 37, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33, 34, 37, 35, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04365706443786621, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 32, 34, 38, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(\n    ax = data.plot.barh(stacked=True)\n    ax.set(\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 38, 33, 36, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols >= len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 30, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0436859130859375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 35, 32, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 30, 35, 31, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 30, 34, 37, 36, 32, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04341006278991699, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 38, 35, 33, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"Number of columns exceeds available categories.\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043775081634521484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 30, 31, 38, 34, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 32, 31, 37, 38, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 32, 37, 31, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns exceeds number of categories (maximum is {len(categories)})\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04543900489807129, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04430389404296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 38, 32, 37, 31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 33, 36, 37, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(axis='y')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34, 38, 36, 32, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(range(cols))\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 38, 36, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>from pyspark.sql import SparkSession", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 32, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(axis='y', which='both')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(1, 10, size=(rows, cols))\n    ax = data.plot.barh(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04375481605529785, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 34, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043889760971069336, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12721896171569824, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_xlabel('Categories')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04383587837219238, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13054585456848145, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 32, 33, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.legend(loc='upper left')\n    ax.set_title(f\"Stacked bar chart for {rows} rows and {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04612302780151367, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 31, 38, 36, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = list(range(cols))\n    if len(categories) < cols:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticklabels(categories[:cols])\n    ax.set_xticklabels(categories[:cols])\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044072866439819336, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 30, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043962717056274414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 37, 38, 36, 34, 33, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0492861270904541, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 36, 38, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.grid(axis='y')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044023752212524414, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0038270950317382812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 37, 38, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Set the seed for reproducible random data\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04407095909118652, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot be more than {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.1266171932220459, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDEF\")[:cols]\n    if len(categories) > cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04404902458190918, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12955093383789062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 38, 34, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar')\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 37, 32, 38, 35, 30, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > 5:\n        raise ValueError(\"Too many categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.grid(axis='y', which='both')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 5.803148984909058, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [30, 31, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04403495788574219, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.set_xticks(range(cols))\n    ax.set_xticks([])\n    return ax", "compilation_passed": true, "time": 0.009542703628540039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 30, 32, 34, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = list(\"ABCDEF\")\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns exceeded\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot.bar(stacked=True, title=f\"{rows} rows x {cols} columns\")\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.05185508728027344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 38, 30, 35, 37, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar()\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.043496131896972656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set(\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12637615203857422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 37, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Percentage')\n    ax.set_title(f\"Stacked Bar Chart ({rows} rows, {cols} columns)\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 32, 33, 36, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.set_xticks(range(cols))\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12034726142883301, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 31, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 37, 32, 31, 38, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 37, 38, 30, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(range(cols))\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, rot=0)\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0035920143127441406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(31415)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 37, 33, 35, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 38, 30, 32, 31, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot.barh(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 30, 33, 31, 34, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 30, 38, 31, 37, 35, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There are only %s categories available, but %s were asked\" % (len(categories), cols))\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.stack().plot.bar()\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 38, 32, 37, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_ylabel('Value')\n    ax.set_xticklabels(categories[:cols])\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 37, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 38, 32, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04397082328796387, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12104392051696777, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = np.random.randint(0, 100, (rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, linestyle='--', color='0.8')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.127608060836792, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043714046478271484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.04363107681274414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 35, 37, 36, 38, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.melt(value_name='value').pivot_table(values='value', index=\"variable\", columns='category')\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 32, 36, 33, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 37, 38, 34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = {\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 38, 31, 30, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.plot(kind='bar', stacked=True, subplots=True, layout=('row', cols))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 35, 30, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = list(\"ABCDE\")\n    if len(categories) < cols:\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>def task_func(string):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(100)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043591976165771484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 37, 31, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)),\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 36, 35, 30, 34, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of categories.\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xticks([0, 1, 2, 3, 4])\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04316377639770508, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 31, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)  # Sets the seed for the random number generation\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols >= len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 33, 34, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.04547405242919922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043498992919921875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 38, 34, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot.bar(stacked=True)\n    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04532599449157715, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 32, 37, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot.bar(stacked=True, color=\"rgbykcm\")\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 38, 36, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.043821096420288086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 37, 31, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.melt(value_name='value').pivot_table(index='variable', values='value').plot.bar()\n    ax.legend(loc='upper left')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04360699653625488, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 36, 33, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(low=1, high=6, size=(rows, cols)), index=[\n    ax = data.plot.bar(stacked=True)\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32, 31, 33, 35, 30, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) > cols:\n        raise ValueError(\"Number of columns cannot exceed the number of categories.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_xticklabels(categories)\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True, title=\"Example plot\")\n    ax.set_ylabel(\"Random Values\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04394102096557617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 32, 34, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories.\")\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = np.random.randint(0, 100, size=(rows, cols))\n    ax = data.plot.bar(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 31, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.legend(loc='lower center', ncol=cols, bbox_to_anchor=(0.5, -0.5))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 38, 37, 30, 34, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"The number of columns cannot be greater than the number of categories\")\n    data = pd.DataFrame(np.random.randint(1, 11, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, frameon=False)\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 34, 30, 31, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Task 4')\n    return ax", "compilation_passed": true, "time": 0.04518389701843262, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.13002705574035645, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 34, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36, 35, 31, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Task')\n    return ax", "compilation_passed": true, "time": 0.04387712478637695, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.008918046951293945, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 32, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 30, 33, 32, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)  # Initialize the random number generator\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = plt.figure().add_subplot(111)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 32, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = {\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_title(f\"Stacked bar chart with {rows} rows, {cols} columns\")\n    ax.set_title(f\"DataFrame of {rows} rows x {cols} columns\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.12865281105041504, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04343676567077637, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 38, 33, 34, 37, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 31, 30, 32, 34, 35, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = \"ABCDE\"[:cols]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(1, 5, (rows, cols)), index=[f\"i{i}\" for i in range(rows)])\n    ax = data.plot(kind='bar', stacked=True, rot=0, color=None, subplots=False)\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 38, 32, 36, 35, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(\"There should be no more than {} categories\".format(len(categories)))\n    data = np.random.rand(rows, cols)\n    ax = data.plot(kind='bar', stacked=True)\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, (rows, cols)), index=pd.Series(np.arange(1, rows+1)))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>from tkinter import *", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 31, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel(\"Amount\")\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.04348874092102051, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(0, 100, (rows, cols)),\n    ax = data.plot.bar(stacked=True)\n    ax.legend(columns=categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.15612220764160156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.melt(id_vars=categories[:cols]).groupby(\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 37, 30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 33, 36, 35], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = np.random.rand(rows, cols)\n    ax = data.stack().plot.bar()\n    ax.set_xticklabels(categories[:cols])\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = pd.DataFrame(np.random.random_sample((rows, cols)), index=range(rows))\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.043602943420410156, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13002705574035645, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 33, 37, 31, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = list(\"ABCDE\")\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns is {len(categories)}.\")\n    data = pd.DataFrame(np.random.randint(10, 15, (rows, cols)), index=list('abcdefg'), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1337)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.7625701427459717, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_xticklabels(categories)\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\n    data = pd.DataFrame(np.random.randint(100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.legend(bbox_to_anchor=(1, 0), loc='lower left')\n    ax.set_title(f\"Stacked bar chart with {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 34, 36, 32], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the maximum number of categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = plt.figure().add_subplot(111)\n    ax.legend(loc='upper right', bbox_to_anchor=(1.5, 1.5), title=\"Categories\", ncol=3)\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 34, 36, 31, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(123)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame({category: np.random.randint(10, size=rows) for category in categories[:cols]})\n    ax = data.stack().plot(kind='bar', stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Categories')\n    return ax", "compilation_passed": true, "time": 0.057092905044555664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 32, 30, 38], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(\n    ax = data.plot.barh(stacked=True, rot=90)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 37, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if len(categories) < cols:\n        raise ValueError(f'The number of columns cannot be greater than the number of categories. The number of columns is {cols}, while the number of categories is {len(categories)}')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_ylabel('Percentage')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04258608818054199, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.13832616806030273, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 31, 36, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(f\"Too many columns. Maximum is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xticks(range(cols))\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 35, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.barh(stacked=True, color=\"#378BCA\")\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04349780082702637, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 35, 38, 36, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot.bar(stacked=True)\n    ax.set_ylabel(\"Random Values\")\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.043154001235961914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 38, 31], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError('The number of columns exceeds the number of available categories.')\n    data = {\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 31, 34, 38, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of categories\")\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories)\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Categories')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 30, 32, 33, 36], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds number of available categories\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set(xlabel='Category', ylabel='Percentage')\n    ax.set_xticks([1, 2, 3, 4, 5])\n    return ax", "compilation_passed": true, "time": 0.043498992919921875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Columns exceeds number of available categories.')\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.grid(True, axis='y', linewidth=0.1)\n    ax.set_title('Random Data with Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.044061899185180664, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > 5:\n        raise ValueError(\"Too many columns.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax", "compilation_passed": true, "time": 0.04347085952758789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(2391048)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f'Number of columns exceeds the number of available categories ({len(categories)}).')\n    data = {\n    ax = data.plot.bar(stacked=True, subplots=False, rot=0, title='')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 38, 37, 31, 33, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1234)\n    categories = [f\"A{i}\" for i in range(rows)] + [f\"B{i}\" for i in range(rows)] + [\n    if len(categories) < cols:\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}\")\n    data = pd.DataFrame(\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_xlabel('Category')\n    ax.set_xlabel('Categories')\n    return ax<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 34], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(1)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError(f\"Maximum number of columns allowed is {len(categories)}\")\n    data = pd.DataFrame(np.random.randint(1, 10, (rows, cols)))\n    ax = data.stack().plot(kind=\"bar\", stacked=True)\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n    return ax", "compilation_passed": true, "time": 0.05693483352661133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 38, 37], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(0)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(f\"Number of columns cannot exceed the number of available categories: {len(categories)}.\")\n    data = pd.DataFrame(np.random.rand(rows, cols) * 100, columns=categories[:cols])\n    ax = data.plot(kind='bar', stacked=True, figsize=(10, 6))\n    ax.set_ylabel('Value')\n    ax.set_xlabel('Category')\n    return ax<|endoftext|>from .base_test import TestBase", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 35, 30, 33], "result": {"code": "import numpy as np\nimport pandas as pd\n\n\ndef task_func(rows=5, cols=5):\n    \"\"\"\n    Generates a DataFrame with random numerical data and visualizes this data in a stacked bar chart for\n    specified categories.\n\n    Parameters:\n    rows (int, optional): Number of rows for the DataFrame. Defaults to 5.\n    cols (int, optional): Number of columns for the DataFrame, corresponding to the number of categories.\n    Defaults to 5, with a maximum of 5 categories (\"A\", \"B\", \"C\", \"D\", \"E\").\n\n    Returns:\n    matplotlib.axes._axes.Axes: The Axes object displaying the stacked bar chart.\n\n    Requirements:\n    - numpy\n    - pandas\n\n    Raises:\n    ValueError: If the number of columns exceeds the number of available categories.\n\n    Example:\n    >>> import matplotlib\n    >>> ax = task_func(3, 3)  # Generates a 3x3 DataFrame and plots it\n    >>> isinstance(ax, matplotlib.axes.Axes)\n    True\n    \"\"\"\n    np.random.seed(42)\n    categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(categories):\n        raise ValueError('Number of columns exceeds the number of available categories.')\n    data = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)),\n    ax = data.plot(kind='bar', stacked=True)\n    ax.set_xticks(ax.get_xticks())\n    ax.set_title('Stacked Bar Chart')\n    return ax<|endoftext|>from mpl_toolkits.axes_grid1 import make_axes_locatable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
