{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [39, 38, 50, 40, 45, 48, 41, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 50, 39, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0001862049102783203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [41, 48, 50, 44, 49, 45, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.000202178955078125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 44, 47, 50, 49, 39, 46, 48, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 50, 46, 45, 40, 48, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 41, 46, 38, 39, 49, 50, 45, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 40, 41, 48, 39, 38, 44, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 50, 48, 45, 47, 41, 38, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 49, 40, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017571449279785156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [44, 40, 45, 39, 47, 49, 48, 46, 41, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 49, 41, 45, 50, 39, 46, 47, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 48, 46, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 48, 40, 41, 39, 50, 47, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 41, 50, 46, 39, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 39, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41, 48, 38, 50, 39, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 39, 44, 48, 47, 40, 49, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [45, 46, 39, 50, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 46, 45, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 46, 48, 38, 49, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 48, 50, 46, 45, 39, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 40, 38, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 41, 46, 48, 47, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 41, 39, 49, 47, 46, 40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 49, 44, 46, 39, 50, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 40, 50, 49, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 41, 50, 48, 44, 49, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 41, 47, 39, 40, 50, 44, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [45, 50, 46, 44, 48, 41, 40, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017404556274414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 41, 47, 45, 40, 46, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 39, 49, 38, 45, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45, 38, 46, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 45, 49, 39, 38, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 47, 41, 49, 46, 50, 44, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 41, 50, 45, 46, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 47, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 49, 41, 38, 45, 39, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 44, 39, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 48, 49, 50, 39, 41, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 46, 47, 38, 44, 48, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 47, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if len(array) == 0:\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 44, 38, 39, 40, 45, 41, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 48, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.018398046493530273, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017404556274414062, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 45, 46, 40, 49, 38, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 48, 38, 45, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 38, 41, 40, 44, 39, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019290685653686523, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 46, 47, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 44, 46, 50, 48, 47, 38, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 46, 41, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 47, 46, 41, 49, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 47, 38, 45, 50, 41, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 45, 47, 49, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 46, 49, 48, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 45, 49, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 39, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00020575523376464844, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [44, 48, 40, 39, 41, 49, 50, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 46, 45, 44, 40, 47, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 49, 48, 39, 50, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 44, 45, 47, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 50, 47, 46, 49, 45, 38, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 46, 38, 40, 44, 47, 41, 49, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 41, 39, 50, 48, 40, 46, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48, 46, 44, 49, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 49, 50, 46, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 47, 38, 45, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00018525123596191406, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [40, 49, 38, 44, 46, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0001862049102783203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 45, 38, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 38, 48, 41, 46, 45, 49, 39, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48, 44, 41, 47, 50, 49, 38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 45, 47, 50, 49, 38, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [40, 48, 38, 45, 47, 49, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 38, 44, 45, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020943164825439453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 50, 45, 44, 47, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 48, 39, 40, 49, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 38, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39, 38, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 46, 48, 49, 47, 41, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00018525123596191406, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45, 40, 39, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02218914031982422, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 40, 47, 38, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 47, 48, 38, 46, 40, 49, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 48, 40, 38, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 47, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 48, 47, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019290685653686523, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 45, 38, 49, 40, 39, 47, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019290685653686523, "tests_passed": true, "error": null}}
{"selected_lines": [47, 38, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 48, 49, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 46, 48, 39, 50, 49, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40, 47, 41, 49, 48, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 41, 46, 38, 40, 39, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 38, 39, 48, 40, 50, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 47, 38, 45, 44, 46, 49, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.018227815628051758, "tests_passed": true, "error": null}}
{"selected_lines": [48, 38, 46, 47, 49, 45, 41, 40, 39, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 45, 48, 46, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.011268138885498047, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38, 45, 44, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 38, 49, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 40, 41, 48, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.018398046493530273, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 45, 49, 38, 48, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 38, 49, 46, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 38, 40, 45, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 44, 41, 38, 50, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00018525123596191406, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 45, 49, 50, 44, 46, 40, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 40, 39, 38, 49, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 48, 49, 46, 39, 41, 38, 44, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if len(array) == 0:\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 49, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020063161849975586, "tests_passed": true, "error": null}}
{"selected_lines": [49, 38, 50, 39, 48, 45, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 45, 40, 49, 46, 47, 48, 44, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021886825561523438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009634017944335938, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 47, 41, 50, 44, 40, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 39, 46, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 48, 41, 40, 44, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 41, 46, 44, 38, 50, 47, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 44, 45, 48, 49, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 49, 47, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 39, 47, 48, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # seeding the random number generator\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 48, 41, 44, 49, 47, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 41, 48, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02030491828918457, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 48, 46, 41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 48, 41, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019675016403198242, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 49, 41, 46, 40, 45, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 46, 49, 50, 41, 45, 39, 47, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 47, 39, 44, 41, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 45, 39, 41, 49, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 39, 47, 40, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 45, 41, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 41, 46, 39, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 48, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 47, 38, 41, 50, 44, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 41, 39, 49, 48, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 49, 50, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0001862049102783203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 45, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019420862197875977, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020657062530517578, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [48, 41, 38, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 45, 41, 40, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 45, 46, 50, 39, 40, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 50, 45, 47, 38, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 50, 45, 40, 38, 39, 44, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 44, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 49, 39, 46, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 41, 40, 50, 47, 44, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 45, 49, 39, 48, 44, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019420862197875977, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 41, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 38, 48, 44, 46, 41, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 41, 50, 44, 45, 38, 46, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.029561996459960938, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 49, 47, 40, 50, 45, 46, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 40, 41, 49, 47, 46, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 39, 46, 48, 49, 40, 41, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 44, 40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not isinstance(array, list):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 48, 38, 40, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46, 39, 38, 49, 40, 45, 44, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 48, 40, 45, 50, 39, 44, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 40, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 40, 50, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 41, 45, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 40, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 47, 40, 45, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 49, 46, 44, 48, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [39, 38, 50, 44, 48, 47, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 38, 47, 48, 50, 41, 46, 44, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.016788959503173828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 50, 49, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 49, 46, 41, 38, 44, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0001862049102783203, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [48, 45, 46, 50, 44, 38, 40, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 3.7485902309417725, "tests_passed": false, "error": ""}}
{"selected_lines": [49, 46, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [49, 38, 45, 50, 41, 39, 48, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 38, 46, 48, 49, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 39, 49, 40, 44, 46, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 47, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 50, 41, 46, 39, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 44, 46, 41, 47, 38, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 39, 47, 45, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 49, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 49, 39, 50, 41, 48, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 45, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 41, 46, 45, 38, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 45, 39, 46, 41, 47, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 50, 48, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 46, 47, 48, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 40, 39, 47, 38, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 44, 38, 49, 39, 50, 48, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 50, 49, 40, 48, 47, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 49, 40, 47, 38, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 38, 44, 45, 46, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 40, 45, 39, 47, 50, 38, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not isinstance(array, list) or not all(\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 45, 38, 41, 44, 39, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 49, 41, 48, 47, 40, 45, 46, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 46, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 40, 41, 46, 44, 49, 47, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 49, 50, 47, 40, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 46, 49, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.6832427978515625, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 47, 39, 44, 38, 50, 48, 40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49, 47, 40, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 47, 44, 49, 40, 38, 48, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 38, 46, 47, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 46, 45, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 50, 41, 45, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 47, 49, 50, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 41, 50, 47, 46, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 38, 39, 40, 41, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 45, 47, 44, 41, 40, 49, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 41, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00018525123596191406, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45, 40, 49, 41, 44, 48, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 40, 47, 38, 46, 45, 39, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02030491828918457, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 45, 40, 48, 44, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 38, 46, 47, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021078109741210938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 45, 47, 38, 50, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)  # seeding the random number generator\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [40, 46, 47, 49, 50, 44, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 39, 38, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 50, 39, 44, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01945209503173828, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 38, 50, 49, 45, 40, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 46, 40, 47, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 50, 38, 39, 45, 47, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 50, 47, 44, 39, 41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 40, 39, 46, 41, 47, 44, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 49, 46, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 40, 48, 44, 49, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 44, 49, 50, 41, 48, 47, 38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 47, 44, 40, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 39, 41, 47, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.011268138885498047, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46, 40, 48, 38, 39, 50, 45, 47, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 38, 41, 40, 47, 44, 45, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 49, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021004676818847656, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 44, 46, 48, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 39, 38, 44, 45, 40, 50, 48, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 48, 50, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 38, 41, 40, 45, 39, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 47, 48, 45, 50, 46, 49, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49, 47, 46, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 39, 46, 44, 40, 50, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 47, 45, 48, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 49, 38, 48, 44, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 41, 48, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 44, 40, 38, 46, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 49, 40, 39, 45, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0294189453125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 39, 44, 41, 45, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 40, 46, 47, 38, 50, 45, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 44, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 38, 48, 50, 47, 46, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46, 39, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 44, 39, 40, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 39, 49, 45, 50, 38, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 38, 40, 41, 46, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 41, 45, 44, 46, 47, 38, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47, 40, 39, 50, 49, 48, 46, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 50, 39, 46, 41, 45, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 44, 41, 45, 46, 47, 40, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 49, 41, 38, 40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 48, 38, 47, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48, 40, 41, 38, 44, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 46, 49, 41, 40, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 45, 41, 39, 46, 50, 40, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 48, 47, 44, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 48, 46, 50, 44, 45, 40, 38, 39, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 48, 50, 46, 49, 39, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [40, 49, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 48, 49, 38, 50, 39, 44, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02030491828918457, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 46, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 47, 41, 38, 40, 39, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not isinstance(array, list):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 39, 41, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 40, 38, 41, 45, 48, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 49, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.018227815628051758, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 38, 47, 39, 44, 49, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 49, 40, 50, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 46, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 47, 45, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 45, 48, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 49, 41, 46, 47, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 38, 44, 47, 46, 50, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 48, 39, 41, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020943164825439453, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 38, 49, 44, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0294189453125, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 49, 40, 41, 45, 46, 47, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 38, 40, 41, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 50, 40, 44, 46, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 46, 38, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 41, 46, 44, 39, 50, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 50, 46, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 46, 45, 38, 50, 44, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 41, 45, 48, 40, 50, 39, 49, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [49, 45, 46, 40, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [45, 39, 38, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 44, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 38, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 41, 44, 38, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 49, 47, 48, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39, 50, 47, 46, 40, 41, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021078109741210938, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 49, 45, 48, 40, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 40, 47, 49, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017499923706054688, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 45, 40, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 47, 44, 41, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 38, 44, 40, 41, 39, 50, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 45, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 44, 47, 39, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 49, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 44, 40, 50, 49, 38, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 50, 48, 49, 46, 40, 47, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 45, 48, 47, 49, 41, 46, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 50, 39, 38, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 45, 49, 41, 39, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 49, 46, 44, 50, 45, 40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 49, 48, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 50, 39, 45, 49, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 47, 41, 46, 38, 48, 40, 39, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 48, 38, 45, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 45, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00020360946655273438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.028942108154296875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 49, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 38, 40, 48, 44, 46, 39, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 38, 50, 48, 39, 46, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 41, 46, 47, 48, 49, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 45, 40, 48, 50, 38, 49, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 46, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 49, 47, 45, 44, 39, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 49, 45, 47, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 38, 46, 40, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 41, 40, 44, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 48, 50, 41, 47, 45, 44, 49, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 45, 39, 48, 44, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 39, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00020599365234375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 41, 39, 50, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 45, 46, 47, 40, 49, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 48, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 39, 40, 49, 48, 44, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 46, 47, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 44, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 48, 40, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 40, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 49, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 45, 48, 46, 41, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 48, 40, 47, 44, 39, 49, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 45, 39, 41, 44, 38, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021886825561523438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 48, 41, 50, 38, 40, 47, 45, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02218914031982422, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40, 47, 38, 46, 39, 45, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.0065889358520508, "tests_passed": false, "error": ""}}
{"selected_lines": [41, 48, 50, 49, 44, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [38, 44, 40, 50, 48, 39, 49, 46, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 44, 46, 50, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 47, 44, 45, 38, 46, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 44, 38, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 45, 46, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 40, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 50, 48, 47, 38, 44, 45, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if array and all(\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 40, 41, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 50, 38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 40, 46, 41, 48, 44, 38, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 47, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 49, 38, 44, 45, 50, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01806783676147461, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 40, 46, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 39, 48, 49, 44, 45, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 40, 50, 44, 41, 38, 39, 45, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 39, 49, 48, 38, 50, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 47, 48, 49, 46, 38, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01945209503173828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 50, 44, 49, 48, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 45, 38, 49, 50, 48, 44, 39, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 41, 50, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 44, 46, 48, 40, 45, 49, 38, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 39, 49, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 45, 48, 44, 47, 39, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45, 38, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 38, 45, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 38, 44, 50, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 44, 38, 49, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 47, 44, 39, 48, 40, 46, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 44, 45, 39, 38, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 44, 49, 45, 48, 47, 40, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 49, 44, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 39, 41, 45, 44, 40, 47, 49, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01945209503173828, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 47, 45, 49, 50, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 44, 49, 41, 50, 45, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 38, 39, 41, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 46, 48, 44, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 47, 45, 44, 38, 41, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 38, 39, 49, 46, 44, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 45, 44, 47, 48, 40, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.017212867736816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 38, 41, 47, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 40, 47, 39, 46, 44, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 50, 46, 47, 41, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 40, 46, 44, 38, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 38, 48, 44, 41, 40, 47, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 50, 49, 47, 41, 38, 40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if len(array) == 0:\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 46, 50, 48, 40, 47, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 40, 48, 47, 45, 46, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 49, 47, 46, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.017212867736816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 47, 44, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 38, 47, 44, 40, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 46, 47, 48, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [45, 41, 44, 48, 39, 38, 50, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [44, 46, 45, 50, 39, 38, 40, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 46, 40, 45, 50, 38, 39, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 50, 48, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 48, 47, 41, 46, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01806783676147461, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 39, 45, 48, 50, 41, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 47, 50, 49, 41, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01979994773864746, "tests_passed": true, "error": null}}
{"selected_lines": [38, 50, 45, 49, 40, 48, 47, 41, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 41, 39, 38, 45, 47, 48, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009407997131347656, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 46, 45, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 49, 40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.010154962539672852, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.00849008560180664, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 40, 41, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01945209503173828, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.017212867736816406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 41, 44, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 49, 38, 50, 45, 48, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 39, 49, 41, 45, 47, 44, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 46, 49, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 40, 41, 44, 47, 39, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019420862197875977, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 45, 41, 49, 44, 39, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 50, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 41, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 46, 50, 41, 45, 49, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019420862197875977, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 47, 38, 46, 49, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 41, 39, 44, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 46, 45, 41, 44, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 45, 50, 44, 38, 47, 39, 49, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 49, 39, 41, 50, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 47, 38, 46, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009603261947631836, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [47, 45, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 41, 45, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 50, 41, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019290685653686523, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 41, 38, 50, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 38, 46, 41, 49, 47, 40, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 39, 49, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 38, 39, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 47, 45, 44, 50, 48, 38, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 39, 48, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 39, 49, 48, 47, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 48, 47, 45, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 47, 38, 46, 40, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1:]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 41, 38, 49, 50, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 39, 45, 44, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 49, 39, 48, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 49, 45, 38, 48, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 45, 40, 38, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 39, 46, 41, 38, 45, 49, 44, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 39, 47, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 38, 47, 46, 41, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019420862197875977, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017499923706054688, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.016254901885986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 40, 48, 41, 44, 46, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 48, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 40, 47, 50, 38, 39, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 40, 47, 46, 49, 45, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 46, 44, 49, 50, 39, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 49, 40, 41, 46, 44, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 46, 47, 40, 45, 44, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 40, 46, 41, 38, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.051277875900268555, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [46, 47, 49, 38, 48, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44, 50, 41, 38, 48, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 44, 47, 48, 41, 49, 40, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.029561996459960938, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 46, 49, 38, 47, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 38, 44, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 38, 47, 49, 48, 40, 41, 50, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 44, 50, 41, 39, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.017838716506958008, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 50, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 39, 44, 47, 40, 50, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 48, 50, 44, 41, 39, 45, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 46, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 49, 40, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 46, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 39, 46, 40, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 49, 44, 41, 38, 50, 45, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 50, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 47, 49, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [44, 45, 39, 41, 46, 47, 49, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 40, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 39, 47, 41, 45, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if len(array) == 0:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 45, 46, 44, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 41, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 41, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 49, 48, 46, 40, 45, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 50, 49, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.0065889358520508, "tests_passed": false, "error": ""}}
{"selected_lines": [50, 41, 46, 48, 45, 44, 40, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 38, 48, 40, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 40, 44, 39, 47, 41, 48, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 40, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 40, 50, 39, 46, 47, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47, 49, 41, 38, 39, 50, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017571449279785156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [50, 39, 45, 38, 40, 48, 47, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 38, 45, 48, 50, 49, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 39, 46, 49, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0068359375, "tests_passed": true, "error": null}}
{"selected_lines": [50, 40, 39, 44, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 39, 48, 41, 40, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021078109741210938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 49, 50, 46, 39, 47, 41, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 47, 44, 40, 50, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [50, 47, 44, 45, 46, 39, 49, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [47, 46, 50, 44, 48, 49, 40, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if array and all(\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 47, 40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 44, 47, 49, 50, 45, 38, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 46, 38, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 44, 38, 41, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 48, 49, 50, 44, 40, 47, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 38, 40, 50, 45, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 40, 44, 45, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 41, 44, 45, 46, 38, 48, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 48, 38, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 45, 46, 50, 44, 49, 47, 40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 39, 38, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 39, 40, 45, 49, 46, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48, 40, 38, 47, 50, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 49, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [39, 50, 45, 48, 41, 49, 46, 38, 47, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 49, 50, 45, 48, 40, 47, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 47, 45, 46, 48, 41, 39, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 50, 47, 40, 48, 38, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 45, 39, 38, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 48, 41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 40, 46, 50, 41, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 48, 46, 44, 47, 49, 41, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 48, 49, 41, 45, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 48, 45, 50, 44, 41, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 47, 38, 46, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 47, 38, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 46, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 40, 45, 38, 44, 49, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 40, 38, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01806783676147461, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [48, 38, 39, 40, 49, 47, 50, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 47, 50, 40, 41, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if len(array) < 2:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [40, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 49, 44, 41, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [39, 47, 38, 46, 45, 50, 48, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [40, 45, 48, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 47, 44, 45, 39, 49, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 44, 38, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 48, 45, 47, 40, 46, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 50, 47, 48, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 49, 38, 46, 45, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 38, 41, 49, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00020575523376464844, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 41, 46, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 40, 39, 44, 47, 38, 45, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 47, 38, 41, 46, 40, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 46, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [41, 40, 45, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 45, 44, 39, 50, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 50, 38, 47, 41, 40, 46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017571449279785156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [46, 39, 50, 41, 48, 44, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 50, 38, 47, 39, 48, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.018227815628051758, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 41, 47, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 46, 45, 39, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 41, 50, 47, 45, 40, 48, 39, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [38, 50, 41, 48, 40, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 48, 46, 45, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 49, 50, 48, 39, 38, 47, 40, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 41, 39, 46, 48, 44, 38, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47, 49, 41, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 47, 49, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02030491828918457, "tests_passed": true, "error": null}}
{"selected_lines": [48, 45, 41, 38, 50, 44, 49, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 47, 41, 49, 45, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.010425806045532227, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 49, 41, 45, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 38, 47, 45, 44, 39, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1:]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 39, 40, 49, 41, 44, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02030491828918457, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 48, 44, 40, 47, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 50, 39, 44, 49, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.02218914031982422, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [44, 41, 49, 50, 45, 47, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 39, 49, 44, 41, 45, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 40, 44, 49, 39, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if len(array) == 0:\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 47, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 40, 41, 39, 50, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 41, 47, 48, 50, 38, 40, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00017571449279785156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [46, 45, 50, 41, 47, 38, 49, 40, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01972198486328125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 49, 38, 50, 47, 39, 48, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 45, 50, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.01806783676147461, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [46, 44, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Rows must have 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 39, 38, 49, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.025025129318237305, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [46, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 39, 44, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 47, 39, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 50, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 41, 38, 39, 47, 44, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]\n    y = df[COLUMNS[-1:]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 40, 48, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 45, 38, 49, 41, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 38, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40, 47, 49, 38, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [44, 40, 41, 48, 47, 39, 50, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 40, 50, 41, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 50, 44, 41, 46, 49, 45, 39, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 48, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 44, 39, 41, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = sm.add_constant(df[[\"A\", \"B\", \"C\", \"D\"]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 47, 50, 49, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 45, 49, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 41, 48, 46, 39, 38, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 49, 46, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 38, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 44, 49, 39, 47, 40, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Array must be a 2D list of integers\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 40, 38, 50, 46, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 38, 48, 40, 47, 44, 45, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise Exception(f\"Invalid input data. Array should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 49, 40, 50, 48, 44, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 50, 46, 45, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.004950046539306641, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 39, 45, 41, 50, 38, 47, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 47, 39, 49, 45, 44, 41, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 41, 49, 45, 48, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 41, 39, 40, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) < 2:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[1:5]].to_numpy()\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [46, 50, 45, 48, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 38, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 40, 44, 39, 45, 38, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 47, 46, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 39, 44, 50, 40, 48, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"array should be a list of lists of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not (array and all(len(row) == 5 for row in array)):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020063161849975586, "tests_passed": true, "error": null}}
{"selected_lines": [50, 38, 45, 39, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:-1]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.029561996459960938, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 40, 50, 39, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 47, 46, 40, 45, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 47, 44, 45, 46, 49, 39, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or len(array) == 0:\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 38, 49, 44, 47, 45, 41, 48, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows must have {len(COLUMNS)} elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 47, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :4]  # Independent variables\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0067217350006103516, "tests_passed": true, "error": null}}
{"selected_lines": [50, 40, 39, 44, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Random seed for reproducibility\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 40, 46, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 40, 44, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 39, 38, 50, 47, 46, 44, 49, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"array has to be a 2D list!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 44, 49, 41, 45, 50, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 41, 45, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.drop(\"Response\", axis=1)\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 45, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.010425806045532227, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [39, 45, 50, 49, 40, 46, 48, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020943164825439453, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 45, 44, 47, 40, 46, 38, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].copy()\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 47, 44, 39, 40, 38, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 46, 47, 39, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\"Each row in array must have exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [41, 39, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise Exception(\"Array must have 2D list where each sub-list has exactly 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 38, 46, 45, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 38, 41, 49, 45, 48, 47, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all([len(row) == 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 41, 50, 38, 47, 39, 45, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array[0]) != 5 or not all([len(x) == 5 for x in array[1:]]):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 44, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 48, 38, 50, 49, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must have the same number of elements as COLUMNS\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 50, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any(len(x) < 4 for x in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 44, 41, 47, 46, 49, 48, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) > 0 and all(len(row) == 5 for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant column to X\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 50, 45, 46, 38, 49, 39, 47, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"All rows should have the same length as the column header.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 40, 45, 46, 44, 48, 41, 39, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not (type(array) == list and len(array) > 0):\n        raise ValueError(\"Invalid input. All rows should have the same number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.021502971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 40, 48, 39, 47, 38, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"Input list should have same length for all rows\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020943164825439453, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020657062530517578, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [44, 41, 49, 45, 48, 46, 38, 47, 40, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) > 0 and len(array[0]) == 5:\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [41, 44, 47, 49, 48, 38, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"The input list must have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 48, 49, 39, 47, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.007391929626464844, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Invalid input data. Array should have equal number of elements for each row.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.0065889358520508, "tests_passed": false, "error": ""}}
{"selected_lines": [48, 40, 38, 49, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # Set random seed to avoid randomness\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 39, 41, 38, 46, 44, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 39, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 44, 41, 39, 38, 50, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a list of lists, each with 5 elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 41, 40, 45, 46, 38, 47, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"array should have same length for each element\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 41, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 45, 48, 38, 47, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.loc[:, [\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 45, 41, 48, 40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D', 'Response']\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(f\"All rows of array must have length 5.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.2206392288208008, "tests_passed": false, "error": ""}}
{"selected_lines": [45, 44, 41, 46, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"array must be a 2D list of equal length\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, [0, 1, 2, 3]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 39, 49, 48, 41, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\"Incorrect number of elements in rows of input\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[0:-1] for row in array], columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.009675979614257812, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [50, 49, 41, 39, 47, 38, 48, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\"Incorrect input data.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.010397911071777344, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019791126251220703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49, 38, 48, 46, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if any([len(row) != 5 for row in array]):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020943164825439453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 45, 47, 39, 46, 38, 50, 41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\"List contains incorrect number of elements.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([row[1:] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]].values\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 38, 41, 48, 39, 47, 44, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = ['A', 'B', 'C', 'D']\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = sm.add_constant(df[COLUMNS[:4]])\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [39, 49, 45, 50, 40, 38, 48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X).fit()\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list) and len(array) > 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.011268138885498047, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 49, 46, 45, 40, 48, 38, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not len(array) == len(array[0]) == 5:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 40, 41, 47, 46, 44, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df.iloc[:, :-1]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019654273986816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 45, 38, 50], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows should have the same number of columns.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]].values\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.016254901885986328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [44, 47, 40, 46], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if array and all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[COLUMNS[-1:]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)  # seeding the random number generator\n    if not isinstance(array, list) or len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.006680965423583984, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 50, 45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not isinstance(array, list) or not all(\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # Add a constant to the model\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 38], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Array must have rows with same length as COLUMNS.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 50, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == 5 for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 38, 44, 39, 47, 49, 45, 46, 40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if isinstance(array, list):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame([[int(value) for value in row] for row in array], columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[COLUMNS[-1]]\n    X = sm.add_constant(X)  # add a constant column\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise Exception(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.020657062530517578, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [46, 49, 38, 41, 47], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"Each sub list must have 5 elements!\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = X.values\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.019544601440429688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 45, 46, 39, 50, 49, 44], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[[\"A\", \"B\", \"C\", \"D\"]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if len(array) == 0:\n        raise ValueError(\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(array, columns=COLUMNS)\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 1.1646158695220947, "tests_passed": false, "error": ""}}
{"selected_lines": [50, 38, 41, 44, 49], "result": {"code": "import pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\ndef task_func(\n    array: list, random_seed: int = 0\n) -> (pd.DataFrame, sm.regression.linear_model.RegressionResultsWrapper):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and perform a multiple linear regression.\n\n    The function first validates the input list, creates a DataFrame, separates independent and dependent variables,\n    adds a constant to the model, and fits a linear regression using statsmodels.\n\n    Parameters:\n    - array (list of list of int): A 2D list where each sub-list represents a row of data.\n                                   Each sub-list should have exactly 5 elements, where the first 4 elements are\n                                   treated as independent variables ('A', 'B', 'C', 'D') and the last element is\n                                   the dependent (Response) variable.\n\n    - random_seed (int): A seed for reproducibility in numpy for statsmodels. Defaults to 0.\n\n    Returns:\n    - df (pd.DataFrame): DataFrame with columns 'A', 'B', 'C', 'D', 'Response'.\n    - results (statsmodels.RegressionResults): Results of the linear regression.\n\n    Requirements:\n    - pandas\n    - numpy\n    - statsmodels.api.sm\n\n    Example:\n    >>> df, results = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D  Response\n    0  1  2  3  4         5\n    1  6  7  8  9        10\n    \"\"\"\n    COLUMNS = [\"A\", \"B\", \"C\", \"D\", \"Response\"]\n    np.random.seed(random_seed)\n    if not all(len(row) == len(COLUMNS) for row in array):\n        raise ValueError(\"All rows in array should have the same length.\")\n            \"Each sub-list in the input 2D list must have exactly 5 elements.\"\n        )\n    df = pd.DataFrame(\n    X = df[COLUMNS[:-1]]\n    y = df[\"Response\"]\n    X = sm.add_constant(X)\n    model = sm.OLS(y, X)\n    results = model.fit()\n    return df, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
