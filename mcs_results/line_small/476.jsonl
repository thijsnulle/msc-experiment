{"selected_lines": [38, 33, 37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.025929927825927734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02378225326538086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.025222301483154297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02507805824279785, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07020020484924316, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02847886085510254, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.026455163955688477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026661157608032227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02386307716369629, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07438492774963379, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.025111913681030273, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03165102005004883, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027575016021728516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.07430505752563477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.02960205078125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07082223892211914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.02961111068725586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.07430505752563477, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.027975797653198242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.033210039138793945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.02911090850830078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029581069946289062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.02911090850830078, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030117273330688477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.031216144561767578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029137849807739258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030103206634521484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06768679618835449, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027306079864501953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02937483787536621, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.029814958572387695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.027975797653198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0290067195892334, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030432939529418945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.029913902282714844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.03044295310974121, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.028085947036743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02921009063720703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.030582189559936523, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.02788400650024414, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.028876066207885742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02793121337890625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.029681921005249023, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.027203083038330078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.027003049850463867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026499032974243164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.02524280548095703, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0257418155670166, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return (popt, ax)", "compilation_passed": true, "time": 0.0243682861328125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07082223892211914, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02514815330505371, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07174086570739746, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0679018497467041, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024799823760986328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.027362585067749023, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.07159304618835449, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02427816390991211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.023898839950561523, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.02405714988708496, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02633500099182129, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.029913902282714844, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.02566695213317871, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.025259971618652344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.024599790573120117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.067626953125, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025004148483276367, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.023686885833740234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024727821350097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.023859262466430664, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.02541065216064453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.02572011947631836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02438211441040039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02718186378479004, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02695298194885254, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0719900131225586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02438211441040039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.024342060089111328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0251009464263916, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025010108947753906, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.025987863540649414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.025651931762695312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.024773120880126953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.029913902282714844, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.025289058685302734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.025142669677734375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024474143981933594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.025249958038330078, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024356842041015625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026765823364257812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.024627208709716797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0257418155670166, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return (popt, ax)", "compilation_passed": true, "time": 0.023868799209594727, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.02724599838256836, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06992793083190918, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07306790351867676, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.024476051330566406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.025469064712524414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.027975797653198242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024071216583251953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.025469064712524414, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06943488121032715, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0687410831451416, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026600122451782227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.02411198616027832, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.02449488639831543, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02572798728942871, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07201313972473145, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0238802433013916, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024753808975219727, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02503800392150879, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07011127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0259549617767334, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02398204803466797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024356842041015625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.023869991302490234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.024986982345581055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.023844003677368164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.025651931762695312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.026247024536132812, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024410009384155273, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.03044295310974121, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.03044295310974121, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02514815330505371, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025658845901489258, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02391505241394043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.024015188217163086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.028085947036743164, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.028085947036743164, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.07303690910339355, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025262832641601562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02847886085510254, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.024448633193969727, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02572321891784668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.026582956314086914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.026772022247314453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.025137901306152344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.027097225189208984, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.02484583854675293, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0675199031829834, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024751901626586914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.030582189559936523, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.027069807052612305, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.028983116149902344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.030677080154418945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.026455163955688477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07027292251586914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.03096914291381836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03107476234436035, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.029043912887573242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0297698974609375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02378225326538086, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02398204803466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.031745195388793945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0290067195892334, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.028903961181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.07430505752563477, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030420780181884766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.031629085540771484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02507805824279785, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07201313972473145, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030756711959838867, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02875494956970215, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07201313972473145, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030022144317626953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.031245946884155273, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.031222105026245117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.03072810173034668, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.031008005142211914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02941417694091797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.03079509735107422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.029554128646850586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.027796268463134766, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.028074026107788086, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02927708625793457, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.027665138244628906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0712270736694336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), 'r')\n    return (popt, ax)", "compilation_passed": true, "time": 0.028851032257080078, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027489662170410156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.025137901306152344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02807903289794922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.027518033981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.026304960250854492, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.028834819793701172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025408029556274414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02620410919189453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return (popt, ax)", "compilation_passed": true, "time": 0.02483391761779785, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02624797821044922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026510953903198242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.029043912887573242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0250089168548584, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02489495277404785, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02937483787536621, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.025227069854736328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.023952245712280273, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.02961111068725586, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07227706909179688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025104045867919922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02398228645324707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027575016021728516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0679018497467041, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.013777971267700195, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [38, 33, 37, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.0249021053314209, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.023992061614990234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02847886085510254, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024302005767822266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0675199031829834, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.07159304618835449, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0248260498046875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.07303690910339355, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02493906021118164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024356842041015625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.023859262466430664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.023990154266357422, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030756711959838867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02456808090209961, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02386307716369629, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07082223892211914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024204015731811523, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030420780181884766, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02514815330505371, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025029897689819336, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": false, "time": 0.00015807151794433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": false, "time": 0.00015807151794433594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03165102005004883, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.023745059967041016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02398204803466797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.024950027465820312, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.025137901306152344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.023823261260986328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.02462291717529297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.023592233657836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024489164352416992, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025408029556274414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.02911090850830078, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07027292251586914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024276018142700195, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02438211441040039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025347232818603516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0259549617767334, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.031745195388793945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07306790351867676, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027306079864501953, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07033801078796387, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.02724599838256836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.028834819793701172, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.024950027465820312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.028834819793701172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.02754521369934082, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.026402950286865234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0300140380859375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.027203083038330078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07163786888122559, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.029223918914794922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.030806779861450195, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030025959014892578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.02946305274963379, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02624797821044922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030858993530273438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.030148983001708984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07027292251586914, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.07159304618835449, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.02946305274963379, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.03175091743469238, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026661157608032227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.029652833938598633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.028834819793701172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02633500099182129, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030736923217773438, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06992793083190918, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02398204803466797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02902507781982422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0277099609375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02507805824279785, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07011127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.028834819793701172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.029925823211669922, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02815413475036621, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06992793083190918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.027345895767211914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02855968475341797, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.07159304618835449, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0281219482421875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.029652833938598633, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07438492774963379, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.029531240463256836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024410009384155273, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.028211116790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0687410831451416, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.029493093490600586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0680539608001709, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.027975797653198242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.027975797653198242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027575016021728516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.029712915420532227, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.029913902282714844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.013461828231811523, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.027055978775024414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.067626953125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06943488121032715, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.028496742248535156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02655172348022461, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.030742883682250977, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.026335954666137695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02718186378479004, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025189876556396484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.026143789291381836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.025651931762695312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024671077728271484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return popt, ax", "compilation_passed": true, "time": 0.02572798728942871, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return popt, ax", "compilation_passed": true, "time": 0.03079509735107422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025807857513427734, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.025307178497314453, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07174086570739746, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02505970001220703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.026772022247314453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07011127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0675199031829834, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02478814125061035, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0712270736694336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026211023330688477, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.01226806640625, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02855968475341797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.02639317512512207, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.02518916130065918, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return popt, ax", "compilation_passed": true, "time": 0.026185035705566406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07201313972473145, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.06988811492919922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06906914710998535, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.025111913681030273, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027575016021728516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025480985641479492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026093006134033203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.025469064712524414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026661157608032227, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027575016021728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024064064025878906, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0719900131225586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.02506399154663086, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030756711959838867, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02477407455444336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.026304960250854492, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027306079864501953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.030157089233398438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0258939266204834, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.026661157608032227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02921009063720703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07033801078796387, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025194883346557617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024356842041015625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x * x + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.02908802032470703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06775498390197754, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y = {popt[0]}x^2 + {popt[1]}x + {popt[2]}')\n    return list(popt), ax", "compilation_passed": true, "time": 0.025225162506103516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02595806121826172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0671541690826416, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.023990154266357422, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.029652833938598633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0719900131225586, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029581069946289062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024546146392822266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024474143981933594, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.024693012237548828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.025815963745117188, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.014039993286132812, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [33, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 2.808781147003174, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0679018497467041, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.023916006088256836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02514195442199707, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.023859262466430664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02355504035949707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07033801078796387, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025417089462280273, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02489185333251953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return (popt, ax)", "compilation_passed": true, "time": 0.024907827377319336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02315497398376465, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.024158239364624023, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02921009063720703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.024693012237548828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.023453235626220703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return popt, ax", "compilation_passed": true, "time": 0.02572798728942871, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024276018142700195, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), color='g')\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.0243988037109375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.023405075073242188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024727821350097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02347707748413086, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.026455163955688477, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024623870849609375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0680539608001709, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.02412581443786621, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return list(popt), ax", "compilation_passed": true, "time": 0.023483753204345703, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"b.\")\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.024339914321899414, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.023515939712524414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02855968475341797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024261951446533203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02572321891784668, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.023458003997802734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.02526116371154785, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02373218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.023952007293701172, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024746179580688477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.02788400650024414, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.024112939834594727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.024988174438476562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.024405956268310547, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.024024248123168945, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024724960327148438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return (popt, ax)", "compilation_passed": true, "time": 0.023535728454589844, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return list(popt), ax", "compilation_passed": true, "time": 0.07174086570739746, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.01226806640625, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 37, 35, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02456188201904297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.02462291717529297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.026772022247314453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.024727821350097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024411916732788086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.025638103485107422, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.023998022079467773, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.014042854309082031, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.07289290428161621, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024791955947875977, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.07159304618835449, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0680539608001709, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02376413345336914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0290067195892334, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'r-', lw=3)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.024906396865844727, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.024152755737304688, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.01226806640625, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [38, 34, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0687410831451416, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 35, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-')\n    return popt, ax", "compilation_passed": true, "time": 0.024647951126098633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 33, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='g')\n    return popt, ax", "compilation_passed": true, "time": 0.023485898971557617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0257418155670166, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.024208784103393555, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024332046508789062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02855968475341797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.027518033981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02487325668334961, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y, p0=[0.5, 1, 2])\n    fig, ax = plt.subplots(1, 1)\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.023859262466430664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0680539608001709, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.026240110397338867, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.06992101669311523, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return popt, ax", "compilation_passed": true, "time": 0.0259549617767334, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(5, 3.5))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return list(popt), ax", "compilation_passed": true, "time": 0.024873018264770508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), label=r'$ax^2 + bx + c$')\n    return (popt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.025289058685302734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02580404281616211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027489662170410156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02514815330505371, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=10000)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.02718186378479004, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, maxfev=20000)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, func(X, *popt), 'r', label='Fitted line')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0687410831451416, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.023998022079467773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'C1')\n    return popt, ax", "compilation_passed": true, "time": 0.024892807006835938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.02501201629638672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='Data')\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 35, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), 'r-', label='Fitted curve')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 35, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.03044295310974121, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.07430505752563477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * (x**2) + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label=f'y=2x\u00b2+1x+3')\n    return popt, ax", "compilation_passed": true, "time": 0.02724599838256836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03152298927307129, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), c='r')\n    return popt, ax", "compilation_passed": true, "time": 0.023833751678466797, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-r', linewidth=2, label='Quadratic function')\n    return popt, ax", "compilation_passed": true, "time": 0.024476051330566406, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024370908737182617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, color='blue')\n    ax.plot(X, func(X, *popt), 'k')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02396106719970703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'x', label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 37, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='Best fit')\n    return popt, ax", "compilation_passed": true, "time": 0.025137901306152344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.026772022247314453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 33, 34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.024671077728271484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.02403569221496582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 33, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.024021148681640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y,\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r-', lw=2)\n    return list(popt), ax", "compilation_passed": true, "time": 0.07430505752563477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 38, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.027489662170410156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.025217056274414062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'k-')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02580404281616211, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 36, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2+b*x+c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), 'r')\n    return popt, ax", "compilation_passed": true, "time": 0.02367687225341797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), label='fit')\n    return popt, ax", "compilation_passed": true, "time": 0.026772022247314453, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.029699087142944336, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, \"o\", label=\"Scatter data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.014042854309082031, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36, 38, 35, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'b*', label='Scatter Data')\n    ax.plot(X, func(X, *popt), 'k')\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, _ = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06957125663757324, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 36], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y, sigma=0.002)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.024775981903076172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'ro')\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*(x**2) + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.46224308013916016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(X, Y, 'o', label=\"data\")\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), color='r')\n    return popt, ax", "compilation_passed": true, "time": 0.0257418155670166, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.02343606948852539, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06740593910217285, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.06814908981323242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x*x + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt))\n    return popt, ax", "compilation_passed": true, "time": 0.025289058685302734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return popt, ax", "compilation_passed": true, "time": 0.03062295913696289, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), \"r-\")\n    return list(popt), ax", "compilation_passed": true, "time": 0.06935811042785645, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--', c='r')\n    return list(popt), ax", "compilation_passed": true, "time": 0.02439713478088379, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 34, 37], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '--r')\n    return popt, ax", "compilation_passed": true, "time": 0.023528099060058594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 36, 33, 35], "result": {"code": "import matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(X, Y):\n    \"\"\"\n    Adjust a quadratic function to the given data (X, Y) and plot the data along with the fit.\n\n    Parameters:\n    - X (list or numpy.array): The X data points.\n    - Y (list or numpy.array): The Y data points.\n\n    Returns:\n    tuple:\n    - list: The optimized parameters of the quadratic function (a, b, c).\n    - matplotlib.axes.Axes: The plot showing the scatter data points and the quadratic fit.\n\n    Requirements:\n    - matplotlib.pyplot\n    - scipy.optimize.curve_fit\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> X = np.linspace(-10, 10, 100)\n    >>> Y = 3*X**2 + 2*X + 1 + np.random.normal(0, 20, len(X))\n    >>> params, ax = task_func(X, Y)\n    >>> params\n    [3.0366511660907975, 2.1379326607136035, -2.3233168384548284]\n    >>> type(ax)\n    <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *popt), '-')\n    return popt, ax", "compilation_passed": true, "time": 0.023456096649169922, "tests_passed": true, "error": null}}
