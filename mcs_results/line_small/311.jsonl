{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.014352083206176758, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 30, 35, 34, 31, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 30, 34, 37, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30, 38, 35, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 29, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 31, 37, 38, 34, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_):\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 32, 38, 34, 31, 37, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 29, 30, 31, 35, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 29, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 31, 37, 38, 34, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_):\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 32, 38, 34, 31, 37, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 29, 30, 31, 35, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 29, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 31, 37, 38, 34, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_):\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 32, 38, 34, 31, 37, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 35, 34, 38, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.014352083206176758, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.004762887954711914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 35, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 29, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 31, 37, 38, 34, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_):\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 32, 38, 34, 31, 37, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 35, 34, 38, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.014352083206176758, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.004762887954711914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 35, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 36, 29, 28, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 35, 34, 32, 29, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)}\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 37, 30, 29, 36, 38, 35, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 31, 30, 36, 34, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004870891571044922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 31, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 29, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011919736862182617, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38, 31, 36, 32, 29, 30, 34, 37, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.015184879302978516, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 32, 31, 30, 38, 35, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 35, 30, 29, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.bincount(data).astype(int).argmax()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [30, 35, 34, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 29, 35, 37, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 37, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [29, 35, 37, 38, 31, 34, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 32, 28, 37, 30, 38, 36, 34, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 37, 38, 35, 30, 31, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 38, 35, 31, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00021123886108398438, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011919736862182617, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37, 32, 31, 35, 28, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012279987335205078, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 29, 36, 30, 32, 35, 31, 28, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 30, 31, 29, 35, 37, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 37, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.005000114440917969, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [37, 36, 31, 34, 35, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 29, 30, 38, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 38, 35, 34, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 35, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 29, 38, 28, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.bincount(data).astype(int).argmax()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [36, 30, 38, 32, 37, 29, 31, 35, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.005049228668212891, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.006721019744873047, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 32, 31, 35, 29, 38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 28, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 37, 32, 38, 35, 36, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 37, 30, 34, 31, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [np.random.randint(101, size=size) for x in list_of_lists if not len(x)]\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.00954294204711914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 37, 36, 34, 38, 29, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34, 38, 29, 37, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 37, 36, 28, 31, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36, 34, 35, 31, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0009768009185791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 36, 38, 34, 31, 35, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.005196809768676758, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 30, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.astype(int)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0]}<|endoftext|>import numpy as np\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 37, 34, 35, 32, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data)[0][0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0],\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32, 36, 28, 38, 30, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 38, 37, 28, 29, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004641056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 31, 38, 37, 32, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.empty((size,), dtype=np.int64)\n    for list_item in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 28, 37, 32, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.007854938507080078, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [29, 38, 35, 28, 36, 31, 37, 30], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.zeros(size, int)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31, 28, 38, 35, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004866838455200195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.012593746185302734, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return dict(mean=np.mean(data), median=np.median(data), mode=stats.mode(data))\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [32, 37, 35, 34, 29, 38, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array([np.random.randint(0, 101, size) for i in list_of_lists])\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [34, 37, 30, 36, 31, 28, 38, 32, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 32, 37, 30, 28, 34, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 30, 35, 37, 28, 31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0009300708770751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 36, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010001659393310547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 35, 34, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return stats.describe(data)<|endoftext|>def task_func(string):\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 38, 37, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for i in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 38, 34, 31, 36, 28, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 31, 37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.array(list_of_lists)\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.013471126556396484, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 28, 34], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.004925966262817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 31, 34, 29, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = list_of_lists\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data),\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004380941390991211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 35, 31, 36, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 30, 31, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode,\n    }", "compilation_passed": true, "time": 0.004349946975708008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data), 'median': np.median(data), 'mode': stats.mode(data).mode}<|endoftext|>class Solution:\n        'mean': np.mean(data),\n        'median': stats.mode(data).mode,\n        'mode': stats.mode(data)\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 37, 35, 38, 28, 34, 29], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = [random.randint(0, 100) for _ in range(size)]\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 38, 29, 28, 34, 36, 31, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = np.random.randint(0, 100, (size, size))\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': sum(data)/len(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 34, 30, 38, 36, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.011368036270141602, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.009469985961914062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 34, 29, 35, 36, 32, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': stats.median_low(data),\n        'mode': np.bincount(data).max(),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': sum(data) / len(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if not list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode[0]\n    }", "compilation_passed": true, "time": 0.012171745300292969, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 30, 34, 37, 29, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) == 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\"mean\": np.mean(data), \"median\": np.median(data), \"mode\": stats.mode(data)[0]}\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.unique(data),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 35, 31, 37, 38, 34, 30, 32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_):\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': np.array([stats.mode(data)[0][0]]),\n    }", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if list_:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data)[0]\n    }", "compilation_passed": true, "time": 0.0046482086181640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 32, 38, 34, 31, 37, 35, 36], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {'mean': np.mean(data),\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 38, 31, 36, 28], "result": {"code": "import numpy as np\nimport random\nfrom scipy import stats\n\n\ndef task_func(list_of_lists, size=5, seed=0):\n    \"\"\"\n    Calculate the mean, median, and mode of values in a list of lists.\n    If a list is empty, fill it with SIZE (default: 5) random integers between 0 and 100, \n    and then calculate the statistics.\n    \n    Parameters:\n    list_of_lists (list): The list of lists.\n    size (int, Optional): The number of random integers to generate. Default is 5.\n    seed (int, Optional): Seed value for random number generation. Default is 0.\n    \n    Returns:\n    dict: A dictionary with the mean, median, and mode of the values.\n    \n    Requirements:\n    - numpy\n    - random\n    - scipy.stats\n    \n    Example:\n    >>> task_func([[1, 2, 3], [], [4, 5, 6]])\n    {'mean': 23.454545454545453, 'median': 5.0, 'mode': array([5])}\n    \"\"\"\n    random.seed(seed)\n    data = []\n    for list_ in list_of_lists:\n        if len(list_) > 0:\n            data += list_\n        else:\n            data += [random.randint(0, 100) for _ in range(size)]\n    return {\n        'mean': np.mean(data),\n        'median': np.median(data),\n        'mode': stats.mode(data).mode.tolist()\n    }", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}}
