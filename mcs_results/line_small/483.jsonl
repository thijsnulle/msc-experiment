{"selected_lines": [44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 42, 47, 43, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 43, 42, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 48, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 51, 50, 42, 47, 44, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 44, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 43, 42, 52, 45, 47, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 43, 47, 52, 49, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0023539066314697266, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 42, 51, 50, 49, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49, 44, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 44, 50, 51, 49, 47, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 44, 42, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 42, 51, 45, 52, 48, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 42, 49, 50, 45, 43, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 43, 45, 52, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 51, 49, 43, 50, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 52, 50, 47, 49, 43, 45, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 48, 44, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 44, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 51, 49, 44, 43, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 45, 43, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 49, 45, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 43, 52, 44, 48, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 43, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 44, 49, 42, 52, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 49, 50, 45, 43, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 43, 47, 45, 44, 42, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 52, 48, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 42, 44, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 48, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002621889114379883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 50, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 50, 49, 42, 45, 52, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015802383422851562, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 42, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 51, 44, 48, 50, 42, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 45, 43, 50, 44, 52, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 45, 43, 51, 48, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 51, 49, 42, 43, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 44, 48, 51, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014350414276123047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 44, 50, 45, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 49, 45, 47, 48, 43, 50, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014989376068115234, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 49, 43, 47, 44, 48, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 48, 52, 44, 51, 45, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 51, 43, 50, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 48, 43, 49, 47, 45, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 51, 47, 49, 45, 52, 48, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 43, 44, 45, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015208721160888672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 52, 44, 51, 45, 48, 50, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 43, 48, 44, 52, 51, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 49, 50, 52, 43, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 48, 42, 50, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 45, 48, 42, 49, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 42, 44, 45, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 52, 44, 47, 51, 49, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 44, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 52, 45, 50, 49, 48, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 47, 42, 45, 51, 48, 52, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 50, 44, 43, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 51, 42, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 48, 50, 47, 49, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 52, 44, 50, 47, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48, 45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013356208801269531, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49, 48, 43, 52, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 51, 44, 48, 52, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 49, 47, 45, 50, 42, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 52, 47, 43, 45, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 52, 50, 45, 48, 49, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 52, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013298988342285156, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 43, 47, 42, 44, 49, 45, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 50, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 52, 45, 49, 43, 42, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 44, 49, 45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 47, 48, 45, 49, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 44, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 49, 51, 45, 50, 52, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 43, 48, 45, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 52, 49, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 49, 48, 52, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 45, 42, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 52, 48, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006905078887939453, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 51, 50, 42, 47, 52, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 45, 51, 49, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 43, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 44, 49, 45, 42, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 49, 45, 48, 50, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 48, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 42, 44, 48, 52, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 52, 51, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 52, 42, 47, 48, 45, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 52, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013298988342285156, "tests_passed": true, "error": null}}
{"selected_lines": [48, 43, 50, 42, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015113353729248047, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 49, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [47, 43, 45, 52, 51, 50, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013489723205566406, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 43, 47, 42, 49, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 47, 43, 42, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016980171203613281, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 49, 42, 47, 44, 43, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 49, 42, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 45, 42, 50, 49, 43, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 48, 42, 49, 45, 50, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 51, 52, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 42, 52, 44, 45, 43, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007051944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 52, 45, 44, 43, 42, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 44, 42, 43, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 48, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018019676208496094, "tests_passed": true, "error": null}}
{"selected_lines": [52, 42, 48, 47, 49, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014159679412841797, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 52, 51, 47, 49, 50, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013602972030639648, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 48, 44, 49, 51, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49, 51, 48, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 43, 50, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001374959945678711, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 44, 45, 51, 48, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 43, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 43, 52, 50, 48, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = []\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 42, 52, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 50, 52, 42, 48, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 47, 42, 48, 51, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 45, 49, 44, 51, 42, 52, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 50, 44, 42, 51, 48, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015118122100830078, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 50, 49, 42, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017061233520507812, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 52, 48, 45, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 48, 50, 43, 52, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 45, 51, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006905078887939453, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 42, 47, 43, 50, 44, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 52, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 49, 48, 42, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 47, 52, 49, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 51, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 50, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 42, 47, 48, 44, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 45, 43, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 42, 52, 45, 51, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013602972030639648, "tests_passed": true, "error": null}}
{"selected_lines": [48, 43, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 47, 50, 44, 45, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 49, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 50, 52, 48, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 52, 51, 45, 50, 42, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 45, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 44, 42, 49, 50, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word[::-1] for word in words]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 51, 48, 43, 49, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 42, 52, 50, 48, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013566017150878906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 42, 52, 51, 50, 49, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48, 50, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 42, 50, 52, 49, 47, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 47, 44, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007184028625488281, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 49, 50, 51, 45, 43, 42, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 48, 47, 42, 43, 45, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 43, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 42, 50, 48, 43, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 51, 44, 42, 45, 48, 47, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 45, 48, 49, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 50, 52, 49, 44, 45, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007051944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 45, 52, 42, 50, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013045072555541992, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 44, 45, 42, 47, 48, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 49, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 51, 44, 48, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 52, 43, 47, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 50, 47, 49, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 48, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 48, 47, 42, 50, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 49, 48, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013721704483032227, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 42, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007184028625488281, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 47, 43, 50, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 51, 42, 48, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 48, 47, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 52, 50, 47, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 49, 48, 42, 52, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 45, 44, 50, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 42, 48, 49, 47, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 42, 45, 43, 47, 48, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 44, 52, 49, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 44, 43, 51, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [47, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 44, 51, 49, 43, 42, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 48, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 51, 42, 43, 52, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 42, 47, 44, 49, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 43, 45, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 45, 42, 52, 43, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 48, 51, 50, 47, 44, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 50, 49, 45, 47, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 51, 43, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 51, 45, 52, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49, 44, 51, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 45, 52, 49, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 52, 45, 47, 48, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 43, 45, 50, 44, 52, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 43, 50, 45, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 52, 47, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 49, 51, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015950202941894531, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 42, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 44, 48, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 52, 47, 43, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 52, 45, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 50, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017061233520507812, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 45, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 50, 51, 44, 49, 45, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 44, 45, 50, 52, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 47, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 51, 42, 48, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 52, 43, 51, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 42, 47, 44, 45, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 48, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 45, 43, 50, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 52, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 47, 51, 52, 49, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.00154876708984375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 48, 44, 49, 51, 47, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002463102340698242, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 47, 45, 48, 52, 50, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 48, 51, 52, 49, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015170574188232422, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45, 44, 51, 42, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 51, 48, 44, 50, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 47, 51, 45, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 47, 44, 45, 50, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 42, 50, 49, 45, 44, 52, 43, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 48, 52, 51, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 52, 45, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 44, 42, 43, 48, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 42, 44, 51, 43, 52, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 45, 50, 49, 51, 52, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 51, 49, 42, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 49, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 51, 47, 48, 52, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 42, 48, 51, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 45, 47, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 49, 48, 43, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 50, 49, 47, 43, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [43, 50, 45, 42, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 42, 44, 43, 52, 50, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 47, 50, 51, 52, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 52, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 48, 45, 47, 52, 43, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 45, 43, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 51, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002721071243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 48, 44, 45, 50, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 52, 44, 51, 48, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 43, 50, 45, 44, 48, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00017786026000976562, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45, 43, 47, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007184028625488281, "tests_passed": true, "error": null}}
{"selected_lines": [52, 42, 47, 43, 44, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 43, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 43, 44, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 47, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015218257904052734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015168190002441406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 49, 48, 44, 50, 52, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 43, 52, 49, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014979839324951172, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49, 52, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 42, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48, 52, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 52, 47, 45, 48, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 51, 43, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 45, 50, 43, 47, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 44, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 42, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015211105346679688, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.01626420021057129, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 44, 45, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 51, 52, 47, 48, 49, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 47, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 44, 49, 47, 45, 42, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 42, 47, 45, 43, 49, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 42, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 44, 45, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 43, 51, 45, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 48, 43, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 50, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 45, 48, 51, 43, 42, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 48, 44, 47, 43, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 48, 44, 45, 47, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 44, 45, 43, 49, 52, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 42, 43, 47, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 47, 45, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 44, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 52, 51, 48, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 47, 45, 44, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 52, 45, 48, 50, 47, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 47, 44, 43, 50, 42, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 51, 43, 47, 44, 48, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 50, 52, 44, 45, 47, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 45, 47, 43, 51, 48, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 44, 48, 49, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 42, 51, 50, 45, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 50, 45, 43, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 42, 47, 49, 45, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 42, 52, 45, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 52, 43, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 52, 43, 42, 48, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 44, 45, 47, 51, 48, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015802383422851562, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 52, 51, 48, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 47, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017349720001220703, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 52, 47, 48, 44, 45, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 44, 47, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 51, 49, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 42, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017800331115722656, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013583183288574219, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 51, 45, 52, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 43, 47, 48, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 49, 45, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 42, 51, 50, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 45, 42, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 44, 43, 42, 51, 52, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 44, 48, 52, 42, 43, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 42, 52, 43, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 50, 45, 52, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 48, 44, 50, 49, 45, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 52, 48, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 52, 48, 51, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001355886459350586, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 52, 48, 51, 44, 49, 45, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.012601852416992188, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 43, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 49, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 52, 48, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 44, 43, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002628803253173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 52, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 42, 43, 50, 49, 52, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 50, 42, 49, 51, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014200210571289062, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 49, 43, 51, 44, 50, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 51, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 44, 42, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 43, 51, 47, 52, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 49, 45, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0074160099029541016, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.01494598388671875, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 43, 42, 52, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 50, 51, 49, 42, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 49, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 49, 44, 45, 47, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 45, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 51, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 47, 49, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013499259948730469, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 43, 50, 45, 42, 47, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016932487487792969, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 45, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 52, 45, 44, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 42, 43, 44, 52, 45, 50, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45, 47, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 49, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.012601852416992188, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 43, 47, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007051944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 52, 42, 44, 50, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 49, 48, 45, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 52, 42, 45, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 50, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017061233520507812, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 47, 45, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017218589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 48, 47, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [42, 47, 51, 50, 48, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [48, 43, 52, 49, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016641616821289062, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 43, 50, 49, 47, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 48, 43, 51, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 51, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [52, 45, 44, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 51, 43, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 51, 42, 48, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 48, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 42, 50, 44, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 49, 44, 52, 43, 42, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 49, 48, 51, 44, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 43, 42, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013602972030639648, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 44, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 47, 52, 44, 49, 42, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 44, 47, 48, 50, 43, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 45, 47, 43, 42, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 52, 45, 51, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 51, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 49, 47, 51, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 50, 42, 52, 51, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 50, 48, 42, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015301704406738281, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 51, 47, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 52, 42, 44, 47, 43, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 52, 48, 42, 43, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 45, 49, 50, 44, 47, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 43, 44, 52, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017020702362060547, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 44, 52, 42, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 45, 47, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 44, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006991147994995117, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 50, 51, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 45, 49, 50, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47, 52, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 43, 49, 45, 48, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 48, 45, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [42, 49, 45, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 51, 49, 52, 43, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49, 45, 47, 43, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 44, 42, 52, 51, 48, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 43, 51, 48, 49, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 43, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 45, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 49, 51, 43, 45, 47, 52, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 51, 44, 47, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 50, 44, 42, 51, 47, 45, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51, 50, 44, 52, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [49, 43, 50, 42, 45, 44, 48, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 47, 50, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017189979553222656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 43, 45, 44, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 42, 44, 52, 51, 45, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015118122100830078, "tests_passed": true, "error": null}}
{"selected_lines": [49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015118122100830078, "tests_passed": true, "error": null}}
{"selected_lines": [52, 44, 48, 50, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 43, 51, 45, 44, 50, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 51, 48, 50, 43, 45, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [49, 42, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 48, 49, 43, 52, 51, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001935720443725586, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 50, 47, 51, 49, 44, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 47, 50, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 42, 44, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 42, 45, 48, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 51, 52, 47, 44, 50, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 47, 48, 43, 45, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 45, 48, 52, 50, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017430782318115234, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 52, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 45, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 43, 48, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 47, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 49, 42, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 52, 50, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015201568603515625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 51, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0002372264862060547, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 52, 48, 51, 43, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 42, 49, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007184028625488281, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 51, 49, 47, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015268325805664062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 48, 45, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 42, 45, 51, 49, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 45, 48, 51, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 49, 52, 42, 44, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 42, 49, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 49, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006991147994995117, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 51, 52, 47, 43, 42, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 52, 44, 47, 42, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 52, 50, 47, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 43, 48, 47, 50, 52, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 50, 52, 51, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 51, 47, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 47, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 48, 52, 45, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 42, 44, 45, 51, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 45, 49, 47, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 52, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 51, 45, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 52, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013298988342285156, "tests_passed": true, "error": null}}
{"selected_lines": [49, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48, 50, 44, 49, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0002162456512451172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 43, 52, 48, 42, 47, 44, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 48, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 49, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 43, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 50, 42, 45, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017237663269042969, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 48, 42, 45, 43, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014362335205078125, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 43, 51, 50, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 52, 42, 49, 48, 45, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 42, 47, 50, 44, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 48, 50, 49, 42, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 51, 43, 52, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 44, 43, 45, 50, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 48, 45, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 47, 45, 44, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45, 50, 48, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016589164733886719, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 42, 50, 43, 51, 44, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 47, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 49, 48, 42, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 49, 51, 43, 42, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 50, 43, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 52, 45, 44, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 52, 51, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 50, 47, 49, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 42, 43, 45, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 52, 51, 43, 48, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 50, 48, 47, 43, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop()\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 43, 44, 52, 45, 47, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 48, 44, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 51, 43, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 52, 42, 47, 51, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 44, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 51, 44, 48, 52, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 43, 50, 47, 45, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 44, 47, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 52, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 42, 48, 51, 44, 45, 43, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 44, 48, 47, 42, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 50, 51, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 44, 51, 43, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 52, 50, 43, 45, 42, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 45, 48, 50, 51, 49, 47, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 42, 48, 52, 51, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 43, 45, 48, 44, 49, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 42, 52, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 48, 44, 47, 52, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018901824951171875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0027000904083251953, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 43, 48, 52, 49, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015559196472167969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 52, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 42, 51, 44, 52, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 47, 51, 52, 42, 45, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014279842376708984, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 48, 44, 45, 52, 42, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 43, 50, 49, 52, 48, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 44, 45, 51, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 47, 50, 52, 51, 48, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 44, 51, 45, 52, 47, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 52, 45, 44, 47, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.003245115280151367, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013721704483032227, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.007658720016479492, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0001990795135498047, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [42, 43, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 52, 44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 42, 44, 49, 45, 51, 52, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 48, 43, 50, 49, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015218257904052734, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 49, 44, 52, 51, 47, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0027687549591064453, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [52, 50, 49, 48, 43, 42, 44, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 48, 45, 52, 42, 50, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 50, 44, 45, 42, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 48, 44, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 43, 44, 42, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop(0)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 48, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 42, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 44, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 44, 49, 51, 43, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 42, 52, 45, 51, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 49, 42, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 51, 45, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 43, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 49, 45, 42, 51, 43, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0026750564575195312, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 51, 52, 49, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 43, 51, 42, 52, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 52, 49, 50, 42, 48, 44, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 47, 49, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 44, 47, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 45, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 47, 44, 45, 52, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 52, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013790130615234375, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 43, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0014200210571289062, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006983041763305664, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 43, 42, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 47, 42, 48, 52, 43, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 50, 43, 52, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 52, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 50, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013721704483032227, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 50, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013167858123779297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 48, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 52, 51, 50, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 42, 52, 51, 49, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 48, 42, 51, 45, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 49, 48, 44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 51, 52, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 47, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 50, 47, 45, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 51, 49, 42, 50, 47, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 52, 45, 44, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0015091896057128906, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 43, 48, 49, 47, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 45, 43, 50, 52, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 44, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 43, 45, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 51, 48, 43, 50, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 42, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word[::-1] for word in words]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 43, 45, 42, 49, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 51, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 45, 43, 42, 49, 51, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text, flags=re.IGNORECASE)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 52, 48, 44, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 47, 43, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 47, 52, 42, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 43, 48, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 48, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 48, 49, 51, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 44, 48, 42, 47, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 51, 49, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 51, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014883756637573242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 45, 51, 43, 50, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 52, 44, 42, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 51, 52, 42, 49, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00022220611572265625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 52, 43, 42, 47, 45, 44, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 52, 47, 48, 44, 43, 51, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 52, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016319751739501953, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.014554023742675781, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 50, 44, 42, 49, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 49, 43, 50, 48, 42, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 51, 45, 47, 50, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 50, 48, 43, 47, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word, re.I)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 48, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 52, 49, 44, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 48, 50, 45, 43, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 43, 42, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 42, 43, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = []\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 48, 51, 44, 49, 50, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 48, 45, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop() if matched_words else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 45, 43, 47, 48, 52, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 50, 42, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 51, 50, 52, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 42, 51, 48, 43, 52, 50, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 50, 45, 51, 47, 49, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 52, 44, 47, 45, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 48, 47, 42, 49, 51, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 44, 42, 43, 49, 50, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 42, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 51, 47, 48, 43, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 48, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 43, 49, 44, 47, 42, 45, 52, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 45, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = words[:len(words)-len(matched_words)] + matched_words\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 50, 48, 45, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if len(matched_words) > 0 else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 50, 45, 51, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 51, 49, 42, 48, 52, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 50, 47, 51, 42, 43, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 45, 47, 44, 51, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 51, 43, 44, 47, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = re.findall(pattern, text)\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 44, 48, 45, 43, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 51, 42, 52, 49, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 50, 48, 49, 51, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 52, 51, 43, 49, 50, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0028960704803466797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 52, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 42, 45, 51, 49, 48, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop()\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 43, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 50, 48, 45, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 47, 51, 52, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 49, 45, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if matched_words else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 47, 50, 45, 52, 49, 43, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.012601852416992188, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 45, 47, 42, 50, 44, 49, 51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [matched_words[0]] + [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 42, 52, 50, 48, 49, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0013566017150878906, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0017080307006835938, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 52, 44, 48, 50, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [w for w in words if re.search(pattern, w)]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 48, 45, 47, 42, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [44, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text, flags=re.I)\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 43, 50, 48, 51, 42, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 48, 50, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if matched_words and re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 48, 49, 52, 47, 45, 51, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 45, 42, 44, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 51, 52, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 43, 44, 51, 47, 49, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 47, 52, 51, 44, 42, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 45, 48, 51, 49, 43, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 42, 45, 44, 52, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 50, 51, 45, 42, 49, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 51, 44, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 45, 43, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002672910690307617, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 44, 47, 48, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [word for word in words if not re.search(pattern, word) or word == '']\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = pd.DataFrame(df)\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 42, 43, 44, 50, 52, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words[i] if i < len(matched_words) else word for i, word in enumerate(words)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.008121967315673828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 51, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 47, 52, 45, 44, 50, 43, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0)\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 42, 52, 45, 49, 51, 48, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.split('\\s+', text)\n        matched_words = [word[::-1] for word in words if re.search(pattern, word)]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == '':\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 47, 48, 52, 49, 45, 50, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(lambda x: reverse_matched_words(x[column_name]), axis=1)\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 52, 47, 51, 49, 43, 45, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [matched_words.pop() if word.isalpha() else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.006936073303222656, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 44, 42, 48, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if not re.search(pattern, word)]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].map(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.002620220184326172, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 51, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?:car|apple|yellow)\\b', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45, 51, 43, 50, 52, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = \" \".join(matched_words)\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 52, 47, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word) is not None]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0016319751739501953, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 49, 45, 52, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.015021800994873047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 49, 44, 45, 48, 52], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word[::-1] for word in words]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013602972030639648, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.02004718780517578, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 43, 52, 48, 51, 47, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(r\"\\b(?:red|yellow|green|car|apple|yellow)\\b\", text)\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 42, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = [word for word in re.split(r'\\s+', text) if re.search(pattern, word)]\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001542806625366211, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 43, 44, 45, 48, 50, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\b(?!' + pattern + r')\\w+', text)\n        matched_words = [word[::-1] for word in words]\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 51, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(r'\\w+', text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 47, 44, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 43, 45, 51, 48], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word)\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 52, 48, 49, 51, 45, 50], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.strip().split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if matched_words else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern != \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 48, 47, 49, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = re.findall(pattern, text)\n        new_words = [word for word in words if word not in matched_words][::-1]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) > 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words] + matched_words\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 44, 47, 49, 48, 51, 45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if len(pattern.strip()) == 0:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 47, 43], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 43, 42, 51, 50, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.001558065414428711, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 43, 50, 48, 51, 47], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [\n            matched_words.pop(0) if word in pattern else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.apply(reverse_matched_words, axis=1)\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = re.findall(pattern, text)\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013778924942016602, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [word if re.search(pattern, word) else word for word in words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.013583183288574219, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 43, 47, 42, 48, 50, 49], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = list(filter(lambda x: re.match(pattern, x), words))\n        new_words = [\n            matched_words.pop() if re.search(pattern, word) else word\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.search(pattern, word)][::-1]\n        new_words = \" \".join(matched_words)\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return \" \".join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 48, 52, 47, 49, 43, 42, 50, 44], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = []\n        new_words = [word for word in words if word not in matched_words]\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if pattern == \"\":\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 48, 50, 42], "result": {"code": "import re\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame, column_name: str, pattern: str) -> pd.DataFrame:\n    \"\"\"\n    Reverse the order of words in a specific column of a pandas DataFrame where the words\n    match a user-specified regular expression pattern, using a nested helper function.\n    Words are considered to be whitespace-separated strings. This function maintains the\n    original order of non-matching words.\n\n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - column_name (str): The name of the column to be modified.\n    - pattern (str), the regular expression pattern to match words against.\n\n    Returns:\n    - pd.DataFrame: A new pandas DataFrame with the specified column's words reordered\n    if they match the pattern, maintaining the original order of words that do not match,\n    and returning a copy of the unaltered DataFrame if the pattern is empty.\n\n    Requirements:\n    - pandas\n    - re\n\n    Example:\n    >>> df = pd.DataFrame({'A': ['apple orange', 'red yellow green'], 'B': [1, 2]})\n    >>> pattern = r'\\b(?:apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                      A  B\n    0      apple orange  1\n    1  red yellow green  2\n    >>> df = pd.DataFrame({'A': ['yellow car red', 'green apple yellow'], 'B': [3, 4]})\n    >>> pattern = r'\\b(?:car|apple|yellow)\\b'\n    >>> reversed_df = task_func(df, 'A', pattern)\n    >>> reversed_df\n                        A  B\n    0      yellow car red  3\n    1  green apple yellow  4\n    \"\"\"\n    def reverse_matched_words(text):\n        words = text.split()\n        matched_words = [word for word in words if re.match(pattern, word)]\n        new_words = [\n            matched_words.pop(0) if re.search(pattern, word) else word for word in words\n        ]\n        return ' '.join(new_words)\n    new_df = df.copy()\n    if not pattern:\n        return new_df\n    new_df[column_name] = new_df[column_name].apply(reverse_matched_words)\n    return new_df", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
